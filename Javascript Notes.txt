Programming Language
It uses call stack method and is single-threaded
It is synchronous- it is a blocking task
      asynchronous- it is a non-blocking task  
Allows us to give commands to browser
Google V8 Engine: Manages Memory, Interprets JS

What is an object:
Object is an entity: It has property and types
Object is an instance of a class

Methods are a subset of functions and are a block of code that run for an object

CODE:

console.log("Hello Everyone, this is my first piece of JS Code");

console.log({name: "Anvesha"})

console.log(true)
console.log(false)

console.log(false,234233, 'string', {name: "Anand"})

console.warn("This is a warning")

console.error("This is an error")

"const" is used to assign values to variables that cannot be changed


DATA TYPES:

1. Primtive: Name, Number, String etc.

**var/let to declare variable**

2. Non-Primtive

Arrays

FUNCTION EXAMPLE:

    function name(str) {
    console.log(`Hi ${(str)}`)
}


OPERATORS:
    Operand: Upon which operation happens

    Arthimetic Operators-
        +, -, *, /, %, **(power)

    Assignment Operators-
        +=, -=, *=, /=, **=
        ==, -- (Alternatively)

    Comparision Operators-
        >, <, ==, >=, <=
        === checks type as well while == is a value comparision
        
    Logical Operators-
        ! (Not)  eg: != (Not equal to)
        && (Both True) 
        || (Either true)

    TRUTH TABLE:
        console.log("TRUTH TABLE: AND")

        console.log("false && false",false && false)
        console.log("true && true",true && true)
        console.log("true && false",true && false)
        console.log("false && true",false && false)

        console.log("TRUTH TABLE: OR")

        console.log("false || false",false || false)
        console.log("true || true",true || true)
        console.log("true || false",true || false)

    Conditional Statements:
        if, else
        Syntax-
            if(condition){
            }
            else {
                
            }


<----------------------------------------------------------------------->

DOM =>
    Document Object Model (it is an API)
    Represents HTML in tree-like fashion with nodes
    Allows us to manipulate any object in render tree
    
    Node: Each node is an object i.e. each element in render tree  

    API: Bridge between File and Application
         Needed to interact with elements of render tree

    <script defer src="./app.js"></script>
        Use 'defer' to ensure DOM runs only after tree has loaded

    const element = document.getElementById('ID NAME')

    const element = document.getElementsByClassName('CLASS NAME')

    const element = document.getElementsByTagName('TAG NAME')

    const element = document.querySelector('div#selectme')

    const element = document.querySelectorAll('div#selectme')

    To edit content of a particular Query - 
        element.innerHTML = "This is from JS" 

    To style elements in HTML:
        element.style.color = "crimson"
        element.style.fontSize = "40px"

    To add/remove classes to an element:
        // console.log(element.classList)
        // element.classList.add('five')
        // console.log(element.classList)
        // element.classList.remove('one')
        // console.log(element.classList)

    To implement Dark Mode:

        console.log(body.classList.toggle('dark'))

    To check if class is present:
        const value = element.classList.contains('three')
        console.log(value)
<----------------------------------------------------------------------->


