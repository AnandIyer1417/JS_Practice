Programming Language
It uses call stack method and is single-threaded
It is synchronous- it is a blocking task
      asynchronous- it is a non-blocking task  
Allows us to give commands to browser
Google V8 Engine: Manages Memory, Interprets JS

What is an object:
Object is an entity: It has property and types
Object is an instance of a class

Methods are a subset of functions and are a block of code that run for an object

CODE:

console.log("Hello Everyone, this is my first piece of JS Code");

console.log({name: "Anvesha"})

console.log(true)
console.log(false)

console.log(false,234233, 'string', {name: "Anand"})

console.warn("This is a warning")

console.error("This is an error")

"const" is used to assign values to variables that cannot be changed


DATA TYPES:

1. Primtive: Name, Number, String etc.

**var/let to declare variable**

2. Non-Primtive

Arrays

FUNCTION EXAMPLE:

    function name(str) {
    console.log(`Hi ${(str)}`)
}


OPERATORS:
    Operand: Upon which operation happens

    Arthimetic Operators-
        +, -, *, /, %, **(power)

    Assignment Operators-
        +=, -=, *=, /=, **=
        ==, -- (Alternatively)

    Comparision Operators-
        >, <, ==, >=, <=
        === checks type as well while == is a value comparision
        
    Logical Operators-
        ! (Not)  eg: != (Not equal to)
        && (Both True) 
        || (Either true)

    TRUTH TABLE:
        console.log("TRUTH TABLE: AND")

        console.log("false && false",false && false)
        console.log("true && true",true && true)
        console.log("true && false",true && false)
        console.log("false && true",false && false)

        console.log("TRUTH TABLE: OR")

        console.log("false || false",false || false)
        console.log("true || true",true || true)
        console.log("true || false",true || false)

    Conditional Statements:
        if, else
        Syntax-
            if(condition){
            }
            else {
                
            }


<----------------------------------------------------------------------->

DOM =>
    Document Object Model (it is an API)
    Represents HTML in tree-like fashion with nodes
    Allows us to manipulate any object in render tree
    
    Node: Each node is an object i.e. each element in render tree  

    API: Bridge between File and Application
         Needed to interact with elements of render tree

    <script defer src="./app.js"></script>
        Use 'defer' to ensure DOM runs only after tree has loaded

    const element = document.getElementById('ID NAME')

    const element = document.getElementsByClassName('CLASS NAME')

    const element = document.getElementsByTagName('TAG NAME')

    const element = document.querySelector('div#selectme')

    const element = document.querySelectorAll('div#selectme')

    To edit content of a particular Query - 
        element.innerHTML = "This is from JS" 

    To style elements in HTML:
        element.style.color = "crimson"
        element.style.fontSize = "40px"

    To add/remove classes to an element:
        // console.log(element.classList)
        // element.classList.add('five')
        // console.log(element.classList)
        // element.classList.remove('one')
        // console.log(element.classList)

    To implement Dark Mode:

        console.log(body.classList.toggle('dark'))

    To check if class is present:
        const value = element.classList.contains('three')
        console.log(value)

    Event Listeners:
        Change how console reacts to interaction with page
        1. button.addEventListener('click',()=> {
                console.log('You clicked me?')
            })
        2. button.addEventListener('click',()=> {
                element.classList.toggle('crimson')
            })
<----------------------------------------------------------------------->


FUNCTIONS:
    It can have multiple parameters
    You can set their default values
    Any variable inside a function is local to it

ECMA SCRIPT:
    It is what JS is based on

    Example:
        const rock = document.querySelector('#rock')
        const paper = document.querySelector('#paper')
        const scissor = document.querySelector('#scissor')

        const handler = (action) => {
            console.log(action.target.id)
        }

        rock.addEventListener('click', handler) 

        paper.addEventListener('click',handler) 

        scissor.addEventListener('click',handler) 

    ARRAYS:
        .splice(Number of elements, index) : Remove elements from Array
    
        ES6 Destructuring:
            const arr = [1,2,3,4]
            var [one, two, three, four, five] = arr
            console.log(three)
            console.log(five)


            const obj = {
                name: "Anand Iyer",
                email: "ai6774@srmist.edu.in",
                age: 20
            };
            Reference Method #1:
            console.log(obj.email)

            Reference Method #2:
            let {name, email, age} = obj

            console.log(email) 

                Note: If variable name is same then order will not matter when using let

            Adding using ES6:
                let add = (x,y) => console.log(x+y)
                add(10,20)

            Arrow Functions doesn't have its own diff value and argument object while a function does hace access to all this.

            They cannot be used as an Event Handler, Method of an Object Literal, a Prototype method or an Argument object

            Counter function    

                const counter = {
                        count: 1,
                        next: function() {
                            return ++(this.count)
                        },
                        key: this.count
                    }

                    console.log(counter)
                    console.log(counter.next())
                    console.log(counter)
                    console.log(counter.next())
                    console.log(counter)
                    console.log(counter.next())

                ** next() is not a keyword

        MAP:
            It is an array method
            Example:
                let ranks = [1,2,3]
                const newArr = ranks.map((e)=>e+1)
                console.log(newArr)
            Alternatively:
                let ranks = [1,2,3]
                console.log(ranks.map((e)=>{return(e+1)}))

            Syntax:
            In ranks.map((element, index) => {return(index)})

            .foreach cannot return values it can only print items

        FILTER:
            Used to run a function on every element in array and return array with elements that follow condition specified in function

            Example:
                let ranks = [1,2,3,4]
                let newfilterArr = ranks.filter((e, index) => {
                    if(e%2===0)
                        return e
                })
                console.log(newfilterArr)